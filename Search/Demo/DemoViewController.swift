//
//  DemoViewController.swift
//  Search
//
//  Created by Atthachai 'Joe' Meethong on 22/8/2562 BE.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DemoDisplayLogic: class {
  func displaySomething(viewModel: Demo.Something.ViewModel)
}

class DemoViewController: UIViewController, DemoDisplayLogic {
  var interactor: DemoBusinessLogic?
  var router: (NSObjectProtocol & DemoRoutingLogic & DemoDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = DemoInteractor()
    let presenter = DemoPresenter()
    let router = DemoRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    doSomething() // setup SearchController from VIP cycle
//    setupSearchController() // setup SearchController in view controller
  }
  

  func setupSearchController() {
    let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
    let searchResultsController = storyboard.instantiateViewController(withIdentifier: "SearchResultsViewController") as! SearchResultsViewController
    let searchController = CustomSearchController(searchResultsController: searchResultsController)
    searchController.searchBar.placeholder = "Search Demo"
    navigationItem.searchController = searchController
    definesPresentationContext = true
  }
  
  func doSomething() {
    let request = Demo.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Demo.Something.ViewModel) {
    navigationItem.searchController = viewModel.searchController
    definesPresentationContext = true
  }
}
