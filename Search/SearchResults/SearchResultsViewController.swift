//
//  SearchResultsViewController.swift
//  Search
//
//  Created by Atthachai 'Joe' Meethong on 22/8/2562 BE.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchResultsDisplayLogic: class {
  func displaySomething(viewModel: SearchResults.Something.ViewModel)
}

class SearchResultsViewController: UIViewController, SearchResultsDisplayLogic {
  var interactor: SearchResultsBusinessLogic?
  var router: (NSObjectProtocol & SearchResultsRoutingLogic & SearchResultsDataPassing)?
  var viewModel: SearchResults.Something.ViewModel?
  
  @IBOutlet weak var tableView: UITableView!
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = SearchResultsInteractor()
    let presenter = SearchResultsPresenter()
    let router = SearchResultsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething(text: String?) {
    let request = SearchResults.Something.Request(searchText: text)
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: SearchResults.Something.ViewModel) {
    self.viewModel = viewModel
    tableView.reloadData()
  }
}

extension SearchResultsViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return viewModel?.results.count ?? 0
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
    cell.textLabel?.text = viewModel?.results[indexPath.row]
    return cell
  }
}

extension SearchResultsViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    let searchBar = searchController.searchBar
    doSomething(text: searchBar.text)
  }
}

extension SearchResultsViewController: UISearchBarDelegate {
  func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
    print("CancelButtonClicked")
  }
}
